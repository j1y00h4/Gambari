#include "MyImage.h"
#include "DSpriteManager.h"
#include "MyImage.h"
#include "myCharacter.h"

Graphics *g_BackBuffer;
Graphics *g_MainBuffer;
Bitmap   *g_Bitmap;

CHARACTER g_myChar;
CHARACTER g_Background;
CHARACTER g_Fire;
CHARACTER g_Fire_01;
CHARACTER g_lion;
CHARACTER g_Fire_01_Back;

int score = 0;
char scoreText[100];

#define CHARACTER_LOCATION_Y		430     // 찰리 Y 좌표
#define CHARACTER_LOCATION_X		30      // 찰리 X 좌표

#define FIRE_LOCATION_Y				470     // 불 항아리 Y 좌표
#define FIRE_LOCATION_X				1000    // 불 항아리 X 좌표

#define FIRE_01_LOCATION_Y			220     // 원형 불 Y 좌표
#define FIRE_01_LOCATION_X			1500    // 원형 불 X 좌표

#define FIRE_01_BACK_LOCATION_Y		222     // 원형 불 뒷부분 Y 좌표
#define FIRE_01_BACK_LOCATION_X		1545    // 원형 불 뒷부분 X 좌표

#define LION_LOCATION_Y				530     // 사자 Y좌표
//#define MMAX_JUMP					6       
#define ANI_SPEED					150	    // 캐릭터 이동속도

struct SPEED
{
    int jumpSpeed = 8;                      // 점프시 Y축 증가값
    int moveSpeed = 5;                      // 점프시 X축 증가값
    int fireSpeed = 5;                      // 원형 불, 불 항아리의 X축 감소값
};

SPEED ani_speeeeeeed;                       // 스피드 객체

POINT g_pt[] = { {15,-10}, {15,-20}, {15,-30}, {15,30}, {15,20}, {15,10} };

int g_jmpIndex = 0;
bool g_isJump = false;

DWORD g_duration = 0; 
DWORD g_Interval = 0;
DWORD g_Interval_lion = 0;
DWORD g_Interval_fire = 0;
DWORD g_Interval_fire_01 = 0;
DWORD g_InterDie = 0;
DWORD g_Interval_fire_01_Back = 0;


void OnUpdate(HWND hWnd, DWORD tick);
void CreateBuffer(HWND hWnd, HDC hDC);
void ReleaseBuffer(HWND hWnd, HDC hDC);

LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
                     LPSTR lpCmdLine,     int nCmdShow)
{

	WNDCLASS   wndclass;

	wndclass.style = CS_HREDRAW | CS_VREDRAW;
    wndclass.lpfnWndProc = WndProc;
    wndclass.cbClsExtra = 0;
    wndclass.cbWndExtra = 0;
    wndclass.hInstance = hInstance;
	wndclass.hIcon = NULL;
    wndclass.hCursor = NULL;
    wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
    wndclass.lpszMenuName = NULL;
    wndclass.lpszClassName = "HelloWin";
	
	if(RegisterClass(&wndclass) == 0)
	{
		return 0;		
	}

	HWND hwnd = CreateWindow("HelloWin", "Game Window!!", 
                              WS_OVERLAPPEDWINDOW,
                              CW_USEDEFAULT, CW_USEDEFAULT, 
                              1024, 768,
                              NULL, NULL, hInstance, NULL);

    MessageBox(hwnd, "방향키 좌/우로 움직일 수 있고, 점프는 방향키 위 키다.", "Game Start !!", MB_OK);           // 게임 시작 전 윈도우 창이 뜨기 전에 설명하는 부분

	if(hwnd == NULL)
	{
		return 0;
	}

	HDC hDC = GetDC(hwnd);

	CreateBuffer(hwnd, hDC);

	g_Fire.LoadImage("./Data/Image/CircusCharlie_Fire.png");
    g_myChar.LoadImage("./Data/Image/CircusCharlie.png");
	g_Background.LoadImage("./Data/Image/CircusCharlieBackground1.png");
	g_lion.LoadImage("./Data/Image/CircusCharlie_Fire.png");
	g_Fire_01.LoadImage("./Data/Image/CircusCharlie.png");
    g_Fire_01_Back.LoadImage("./Data/Image/CircusCharlie.png");


	ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

	g_Background.LoadAniInfo("ani_Background.txt");                 // 멈춰있는 배경화면
	g_Background.x = 0;
	g_Background.y = 0;

	g_myChar.LoadAniInfo("ani_data.txt");                           // 찰리 캐릭터
	g_myChar.x = CHARACTER_LOCATION_X;
	g_myChar.speed = ANI_SPEED;
	g_myChar.y = CHARACTER_LOCATION_Y;
	
	g_Fire.LoadAniInfo("ani_Fire_data.txt");                        // 땅 위에 있는 불 항아리
	g_Fire.x = FIRE_LOCATION_X;
	g_Fire.y = FIRE_LOCATION_Y;
	g_Fire.speed = ANI_SPEED;

	g_lion.LoadAniInfo("ani_Lion_data.txt");                        // 사자 캐릭터
	g_lion.x = 0;
	g_lion.y = LION_LOCATION_Y;
	g_lion.speed = ANI_SPEED;

	g_Fire_01.LoadAniInfo("ani_Fire_data_01.txt");                  // 원형 불
	g_Fire_01.x = FIRE_LOCATION_X + 500;
	g_Fire_01.y = FIRE_LOCATION_Y - 250;
	g_Fire_01.speed = ANI_SPEED;

    g_Fire_01_Back.LoadAniInfo("ani_Fire_data_01+.txt");            // 원형 불 뒷부분 (캐릭터가 원형 불을 통과하듯이 보이기 위해서)
    g_Fire_01_Back.x = FIRE_LOCATION_X + 545;
    g_Fire_01_Back.y = FIRE_LOCATION_Y - 248;
    
	
	MSG msg;
	DWORD tick = GetTickCount();
	while(1)
	{	
		//윈도우 메세지가 있을경우 메세지를 처리한다.
		if(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if(msg.message == WM_QUIT) break;

			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		else //메세지가 없을 경우 게임 루프를 실행한다.
		{	
			char buff[128];
            
			
			DWORD curTick = GetTickCount();
			DWORD deltatime = curTick - tick;			

			OnUpdate(hwnd, deltatime);
			tick = curTick;

            score ++;

			g_duration += deltatime;
			wsprintf(buff, "Circus Chlie ( SCORE : %d )",score);                // 점수 표시
			SetWindowText(hwnd, buff);

            wsprintf(scoreText, "YOU DIED !! ( SCORE : %d )", score);           // 게임 끝났을 때 출력되는 scoreText

			g_MainBuffer->DrawImage(g_Bitmap, 0, 0);
			
		}
	}
	ReleaseBuffer(hwnd, hDC);

	return 0;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{

	switch(msg)
	{
	case WM_KEYDOWN:
        g_duration = 0;
		break;
    case WM_KEYUP:
        break;
	case WM_LBUTTONDOWN:
		{
		}
		break;
	case WM_CREATE:
		break;
	case WM_DESTROY:
        break;
	}

	return DefWindowProc(hWnd, msg, wParam, lParam);
}

void CreateBuffer(HWND hWnd, HDC hDC)
{
	GdiplusStartupInput			gdiplusStartupInput;
	ULONG_PTR					gdiplusToken;
	GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

	RECT rc;
	GetClientRect(hWnd, &rc);

	g_Bitmap = new Bitmap(rc.right - rc.left, rc.bottom - rc.top);
	g_BackBuffer = new Graphics(g_Bitmap);
	g_BackBuffer->SetPageUnit(Gdiplus::Unit::UnitPixel);
	
	g_MainBuffer = new Graphics(hDC);
	g_MainBuffer->SetPageUnit(Gdiplus::Unit::UnitPixel);
}

void ReleaseBuffer(HWND hWnd, HDC hDC)
{
	ReleaseDC(hWnd, hDC);

	delete g_Bitmap;
	delete g_BackBuffer;
	delete g_MainBuffer;
}

void OnUpdate(HWND hWnd, DWORD tick)
{

        
	if(hWnd == NULL)
		return;

	BYTE  key[256];
	::GetKeyboardState(key);
	int xDir = 0, yDir = 0;						// 키보드 입력시 찰리의 좌표 변화값
	int xDir1 = 0, yDir1 = 0;					// 키보드 입력시 사자의 좌표 변화값
	if(key[VK_LEFT] & 0x80)
	{
		if (g_myChar.y == CHARACTER_LOCATION_Y)
		{
			xDir = -1;
			xDir1 = -1;
		}
	}
	if (key[VK_RIGHT] & 0x80)
	{
		if (g_myChar.y == CHARACTER_LOCATION_Y)
		{
			xDir = 1;
			xDir1 = 1;
		}
	}
	if (key[VK_UP] & 0x80)
	{
		//yDir = -1;

		if (g_myChar.y == CHARACTER_LOCATION_Y && g_lion.y == LION_LOCATION_Y)
		{
			g_isJump = true;
		}
	}
	if (key[VK_DOWN] & 0x80)
	{
		//yDir = 1;

	}
	if (key[VK_ADD] & 0x80)
	{
		//g_myChar.speed += 10;
		//g_lion.speed += 10;
	}
	if (key[VK_SUBTRACT] & 0x80)
	{
		/*g_myChar.speed -= 10;
		if (g_myChar.speed < 0) g_myChar.speed = 0;

		g_lion.speed -= 10;
		if (g_lion.speed < 0) g_lion.speed = 0;*/
	} 
	if (key[VK_SPACE] & 0x80 )
	{
      
	}

	g_myChar.Move(xDir, yDir, tick);                            // 이동속도, 히트박스 설정
	g_lion.LionMove(xDir1, yDir1, tick);                        // 이동속도, 히트박스 설정
    g_Fire.FireCollision(g_Fire.x, g_Fire.y);                   // 히트박스 설정
    g_Fire_01.FireHollCollision(g_Fire_01.x, g_Fire_01.y);      // 히트박스 설정


	// 점프키를 눌렀을 때

	if (g_isJump)
	{
		g_lion.index = 2;			// 점프모션 이미지

		g_myChar.y -= ani_speeeeeeed.jumpSpeed;		// g_myChar 점프 스피드
		g_lion.y -= ani_speeeeeeed.jumpSpeed;		// g_lion 점프 스피드

		g_myChar.x += ani_speeeeeeed.moveSpeed;		// g_myChar 무브 스피드
		g_lion.x += ani_speeeeeeed.moveSpeed;		// g_lion 무브 스피드

		if (g_myChar.y < CHARACTER_LOCATION_Y - 180 && g_lion.y < LION_LOCATION_Y - 180)		// 최대 높이까지 뛰어 올랐을 때
		{
			g_myChar.y = CHARACTER_LOCATION_Y - 180;
			g_lion.y = LION_LOCATION_Y - 180;
			g_isJump = false;
		}

		if (g_lion.rcCollision.IntersectsWith(g_Fire.rcCollision) == TRUE ||
            g_lion.rcCollision.IntersectsWith(g_Fire_01.rcCollision) == TRUE)		// 점프해서 올라가고 있을 때 충돌할 경우
		{
			g_lion.index = 3;
			g_myChar.index = 2;

            ani_speeeeeeed.moveSpeed = 0;
            ani_speeeeeeed.fireSpeed = 0;
            ani_speeeeeeed.jumpSpeed = 0;
		}
	}

	// 점프키를 누르지 않았을때
	if (!g_isJump)
	{
		g_myChar.y += ani_speeeeeeed.jumpSpeed;		// g_myChar 점프 스피드
		g_lion.y += ani_speeeeeeed.jumpSpeed;		// g_lion 점프 스피드

		if (g_myChar.y > CHARACTER_LOCATION_Y && g_lion.y > LION_LOCATION_Y)								// 최저 높이까지 내려왔을때
		{
			g_myChar.y = CHARACTER_LOCATION_Y;
			g_lion.y = LION_LOCATION_Y;
		}
		if (g_myChar.y > CHARACTER_LOCATION_Y - 180 && g_myChar.y < CHARACTER_LOCATION_Y)					// 점프하고 내려올때
		{
			g_myChar.index = 1;
			g_lion.index = 2;

			g_myChar.x += ani_speeeeeeed.moveSpeed;
			g_lion.x += ani_speeeeeeed.moveSpeed;

            if (g_lion.rcCollision.IntersectsWith(g_Fire.rcCollision) == TRUE ||
                g_lion.rcCollision.IntersectsWith(g_Fire_01.rcCollision) == TRUE)	// 점프하고 내려올때 + 충돌했을 경우
            {
                g_lion.index = 3;
                g_myChar.index = 2;

                ani_speeeeeeed.moveSpeed = 0;
                ani_speeeeeeed.fireSpeed = 0;
                ani_speeeeeeed.jumpSpeed = 0;
            }

		}

        if (g_lion.rcCollision.IntersectsWith(g_Fire.rcCollision) == TRUE ||
            g_lion.rcCollision.IntersectsWith(g_Fire_01.rcCollision) == TRUE ||
            g_myChar.rcCollision.IntersectsWith(g_Fire_01.rcCollision) == TRUE)		// 달릴때 + 충돌했을 경우
        {
            g_lion.index = 3;
            g_myChar.index = 2;

            ani_speeeeeeed.moveSpeed = 0;
            ani_speeeeeeed.fireSpeed = 0;
            ani_speeeeeeed.jumpSpeed = 0;
        }
    }
	
	// g_Fire를 x를 0의 방향으로 전진시킨다.
	// 화면밖을 나가면 다시 제자리로 돌아가게 한다.
	g_Fire.x -= ani_speeeeeeed.fireSpeed;
	if (g_Fire.x < -29)
	{
		g_Fire.x = FIRE_LOCATION_X;
		g_Fire.y = FIRE_LOCATION_Y;
	}

	// g_Fire_01를 x를 0의 방향으로 전진시킨다.
	// 화면밖을 나가면 다시 제자리로 돌아가게 한다.
	g_Fire_01.x -= ani_speeeeeeed.fireSpeed;
	if (g_Fire_01.x < -47)
	{
		g_Fire_01.x = FIRE_01_LOCATION_X; // 1500
		g_Fire_01.y = FIRE_01_LOCATION_Y; // 220
	}

	// g_Fire_01_Back를 x를 0의 방향으로 전진시킨다.
	// 화면밖을 나가면 다시 제자리로 돌아가게 한다.
    g_Fire_01_Back.x -= ani_speeeeeeed.fireSpeed;
    if (g_Fire_01_Back.x < -2)
    {
        g_Fire_01_Back.x = FIRE_01_BACK_LOCATION_X; // 1545
        g_Fire_01_Back.y = FIRE_01_BACK_LOCATION_Y; // 222
    }

	// g_Fire, g_Fire_01이 화면 밖을 나가는데 둘다 소수로 설정해서 절때 못 피하는 경우가 없게 설정했다.


	Color color(255, 255, 255);
	g_BackBuffer->Clear(color);


	// 충돌 박스 그리기
    g_Fire.DrawCollisionRect(g_BackBuffer);
    g_lion.DrawCollisionRect(g_BackBuffer);
    g_Fire_01.DrawCollisionRect(g_BackBuffer);
    g_myChar.DrawCollisionRect(g_BackBuffer);

	// 이미지 출력
    g_Background.ImageDraw(g_BackBuffer);
    g_Fire.ImageDraw(g_BackBuffer);
    g_Fire_01.ImageDraw(g_BackBuffer);
    g_lion.ImageDraw(g_BackBuffer);
    g_myChar.ImageDraw(g_BackBuffer);
    g_Fire_01_Back.ImageDraw(g_BackBuffer);

    // 이미지를 반복 출력하기 위해 각자 tick을 받는다. 뭔가 좀 더 간단히 할 수 있을 것 같아서 수정 예정
	g_Interval += tick;
	g_Interval_lion += tick;
	g_Interval_fire += tick;
	g_Interval_fire_01 += tick;
    g_Interval_fire_01_Back += tick;

	// 이미지 인덱스를 반복해서 출력 tick의 시간에 영향을 받아서 (tick을 받아서)
	if (g_Interval_lion >= g_lion.ani[g_lion.index].ani_time)
	{
		g_Interval_lion = 0;

		g_lion.index++;
		if (g_lion.index >= 2)
			g_lion.index = 0;
	}

	if (g_Interval_fire >= g_Fire.ani[g_Fire.index].ani_time)
	{
		g_Interval_fire = 0;

		g_Fire.index++;
		if (g_Fire.index >= g_Fire.nFrame)
			g_Fire.index = 0;
	}

	if (g_Interval_fire_01 >= g_Fire_01.ani[g_Fire_01.index].ani_time)
	{
		g_Interval_fire_01 = 0;

		g_Fire_01.index++;
		if (g_Fire_01.index >= g_Fire_01.nFrame)
			g_Fire_01.index = 0;
	}

    if (g_Interval_fire_01_Back >= g_Fire_01_Back.ani[g_Fire_01_Back.index].ani_time)
    {
        g_Interval_fire_01_Back = 0;

        g_Fire_01_Back.index++;
        if (g_Fire_01_Back.index >= g_Fire_01_Back.nFrame)
            g_Fire_01_Back.index = 0;
    }

    if (g_myChar.index == 2 )
    {
        g_InterDie += tick;
        if (g_InterDie > 500)
        {
            if (MessageBox(hWnd, scoreText,"Game Over !!",MB_OK))
                exit(0);
        }
    }
}
